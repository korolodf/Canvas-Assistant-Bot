{"ast":null,"code":"var _jsxFileName = \"/Users/jaydenj/Desktop/Canvas-Assistant-Bot/chatbot-frontend/src/ChatApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport meProfilePhotoUrl from './circle.svg';\nimport chatProfilePhotoUrl from './circlelogo.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatApp() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const sendMessage = async () => {\n    try {\n      // Add the user's message to the messages array with \"Me: \" prefix and timestamp\n      const currentTime = new Date().toLocaleTimeString();\n      const userMessage = /*#__PURE__*/_jsxDEV(\"span\", {\n        children: inputMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 33\n      }, this); // Wrap \"Me\" in <strong> tag\n      const updatedMessages = [...messages, {\n        sender: 'Me',\n        text: userMessage,\n        timestamp: currentTime,\n        profilePhotoUrl: meProfilePhotoUrl\n      }];\n      setMessages(updatedMessages);\n\n      // Clear the input field\n      setInputMessage('');\n\n      // Make a request to the Flask API endpoint with the user's message\n      const response = await axios.post('http://127.0.0.1:3000/chatbot', {\n        message: inputMessage\n      });\n      const chatbotResponse = response.data.response;\n\n      // Add the chatbot's response to the messages array with timestamp\n      const botMessage = /*#__PURE__*/_jsxDEV(\"span\", {\n        children: chatbotResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 32\n      }, this); // Wrap \"Bot\" in <strong> tag\n      const updatedMessagesWithBotResponse = [...updatedMessages, {\n        sender: 'Bot',\n        text: botMessage,\n        timestamp: currentTime,\n        profilePhotoUrl: chatProfilePhotoUrl\n      }];\n      setMessages(updatedMessagesWithBotResponse);\n    } catch (error) {\n      console.error('Error sending message to chatbot:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender === 'Me' ? 'user' : 'Chatterbox'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: message.profilePhotoUrl,\n          alt: message.sender,\n          className: \"profile-photo\",\n          style: {\n            width: '50px',\n            height: '50px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: message.sender\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [message.text, \"   \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"timestamp\",\n              children: message.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 51\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatApp, \"EsKTm9PYySfYQYLkuLRorTz0Yzg=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","axios","meProfilePhotoUrl","chatProfilePhotoUrl","jsxDEV","_jsxDEV","ChatApp","_s","messages","setMessages","inputMessage","setInputMessage","sendMessage","currentTime","Date","toLocaleTimeString","userMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","updatedMessages","sender","text","timestamp","profilePhotoUrl","response","post","message","chatbotResponse","data","botMessage","updatedMessagesWithBotResponse","error","console","className","map","index","src","alt","style","width","height","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/jaydenj/Desktop/Canvas-Assistant-Bot/chatbot-frontend/src/ChatApp.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport meProfilePhotoUrl from './circle.svg';\nimport chatProfilePhotoUrl from './circlelogo.svg';\n\nfunction ChatApp() {\n    const [messages, setMessages] = useState([]);\n    const [inputMessage, setInputMessage] = useState('');\n\n    const sendMessage = async () => {\n        try {\n            // Add the user's message to the messages array with \"Me: \" prefix and timestamp\n            const currentTime = new Date().toLocaleTimeString();\n            const userMessage = <span>{inputMessage}</span>; // Wrap \"Me\" in <strong> tag\n            const updatedMessages = [...messages, { sender: 'Me', text: userMessage, timestamp: currentTime, profilePhotoUrl: meProfilePhotoUrl }];\n            setMessages(updatedMessages);\n\n            // Clear the input field\n            setInputMessage('');\n\n            // Make a request to the Flask API endpoint with the user's message\n            const response = await axios.post('http://127.0.0.1:3000/chatbot', { message: inputMessage });\n            const chatbotResponse = response.data.response;\n\n            // Add the chatbot's response to the messages array with timestamp\n            const botMessage = <span>{chatbotResponse}</span>; // Wrap \"Bot\" in <strong> tag\n            const updatedMessagesWithBotResponse = [...updatedMessages, { sender: 'Bot', text: botMessage, timestamp: currentTime, profilePhotoUrl: chatProfilePhotoUrl }];\n            setMessages(updatedMessagesWithBotResponse);\n\n        } catch (error) {\n            console.error('Error sending message to chatbot:', error);\n        }\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-window\">\n                {/* Display the chat messages */}\n                {messages.map((message, index) => (\n                    <div key={index} className={`message ${message.sender === 'Me' ? 'user' : 'Chatterbox'}`}>\n                        <img src={message.profilePhotoUrl} alt={message.sender} className=\"profile-photo\" style={{ width: '50px', height: '50px' }} />\n                        <div>\n                            <div><strong>{message.sender}</strong></div>\n                            <div>{message.text}   <span className=\"timestamp\">{message.timestamp}</span></div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <div className=\"input-box\">\n                {/* Input field for sending messages */}\n                <input\n                    type=\"text\"\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    placeholder=\"Type your message...\"\n                />\n                {/* Button to send message */}\n                <button onClick={sendMessage}>Send</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ChatApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}